{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"DataCleaningInputStream": {
			"type": "string",
			"metadata": {
				"description": "Name of the Event Hub"
			}
		},
		"DataCleaningOutputStream": {
			"type": "string",
			"metadata": {
				"description": "Name of the second Event Hub"
			}
		},
		"eventHubNamespaceName": {
			"type": "string",
			"metadata": {
				"description": "Name of the EventHub namespace"
			}
		},
		"storageAccountName": {
			"type": "string",
			"metadata": {
				"description": "Your existing storage account name where you want the blobs be archived"
			}
		},
		"DataCleaningStreamAnalyticsJob": {
			"type": "string",
			"metadata": {
				"description": "Name of the First stream Analytics Job"
			},
			"defaultValue": "cleanOrdersStreamAnalyticsJob"
		},
		"DataAggregatorStreamAnalyticsJob1": {
			"type": "string",
			"metadata": {
				"description": "Name of the Second stream Analytics Job"
			},
			"defaultValue": "sellingProductPerMinJob"
		},
		"DataAggregatorStreamAnalyticsJob2": {
			"type": "string",
			"metadata": {
				"description": "Name of the Third stream Analytics Job"
			},
			"defaultValue": "geoLocationsJob"
		},
		"DataAggregatorStreamAnalyticsJob3": {
			"type": "string",
			"metadata": {
				"description": "Name of the Third stream Analytics Job"
			},
			"defaultValue": "ageGroupWiseRevenueJob"
		},
		"sharedAccessPolicyKey": {
			"type": "string",
			"metadata": {
				"description": "Name of the Third stream Analytics Job"
			}
		}
	},
	"variables": {
		"numberOfStreamingUnits": 3,
		"DataAggregatorOutputContainerName": "publish"
	},
	"resources": [{
			"type": "Microsoft.StreamAnalytics/StreamingJobs",
			"apiVersion": "2016-03-01",
			"name": "[parameters('DataCleaningStreamAnalyticsJob')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"name": "standard"
				},
				"outputErrorPolicy": "stop",
				"eventsOutOfOrderPolicy": "adjust",
				"eventsOutOfOrderMaxDelayInSeconds": 0,
				"eventsLateArrivalMaxDelayInSeconds": 5,
				"dataLocale": "en-US",
				"inputs": [{
					"name": "EventHub",
					"properties": {
						"type": "stream",
						"serialization": {
							"type": "JSON",
							"properties": {
								"encoding": "UTF8"
							}
						},
						"datasource": {
							"type": "Microsoft.ServiceBus/EventHub",
							"properties": {
								"serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
								"sharedAccessPolicyName": "RootManageSharedAccessKey",
								"sharedAccessPolicyKey": "[parameters('sharedAccessPolicyKey')]",
								"eventHubName": "[parameters('DataCleaningInputStream')]"
							}

						}
					}
				}],
				"transformation": {
					"name": "Transformation",
					"properties": {
						"streamingUnits": "[variables('numberOfStreamingUnits')]",
						"query": "SELECT\r\n *\r\nINTO EventhubOutput \r\nFROM EventHub \r\nWHERE orderDate IS NOT NULL"
					}
				},
				"outputs": [{
					"name": "EventhubOutput",
					"type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
					"apiVersion": "2016-03-01",
					"properties": {
						"datasource": {
							"type": "Microsoft.ServiceBus/EventHub",
							"properties": {
								"eventHubName": "[parameters('DataCleaningOutputStream')]",
								"serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
								"sharedAccessPolicyName": "RootManageSharedAccessKey",
								"sharedAccessPolicyKey": "[parameters('sharedAccessPolicyKey')]"
							}
						},
						"serialization": {
							"type": "Json",
							"properties": {
								"encoding": "UTF8",
								"format": "LineSeparated"
							}
						}
					}
				}]
			}
		},
		{
			"type": "Microsoft.StreamAnalytics/StreamingJobs",
			"apiVersion": "2016-03-01",
			"name": "[parameters('DataAggregatorStreamAnalyticsJob1')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"name": "standard"
				},
				"outputErrorPolicy": "stop",
				"eventsOutOfOrderPolicy": "adjust",
				"eventsOutOfOrderMaxDelayInSeconds": 0,
				"eventsLateArrivalMaxDelayInSeconds": 5,
				"dataLocale": "en-US",
				"inputs": [{
					"name": "EventHub",
					"properties": {
						"type": "stream",
						"serialization": {
							"type": "JSON",
							"properties": {
								"encoding": "UTF8"
							}
						},
						"datasource": {
							"type": "Microsoft.ServiceBus/EventHub",
							"properties": {
								"serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
								"sharedAccessPolicyName": "RootManageSharedAccessKey",
								"sharedAccessPolicyKey": "[parameters('sharedAccessPolicyKey')]",
								"eventHubName": "[parameters('DataCleaningOutputStream')]"
							}

						}
					}
				}],
				"transformation": {
					"name": "Transformation",
					"properties": {
						"streamingUnits": "[variables('numberOfStreamingUnits')]",
						"query": "SELECT concat(cast(MAX(DATEPART (dd,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mm,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (yy,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (hh,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mi,orderDate)) as nvarchar(max))) AS allEvents , COUNT(sku) AS allsku INTO Blob FROM EventHub TIMESTAMP BY orderDate GROUP BY TumblingWindow(minute,1)"
					}
				},
				"outputs": [{
						"name": "PBI",
						"properties": {
							"dataSource": {
								"type": "PowerBI",
								"outputPowerBISource": {
									"dataSet": "QuickStartDataSet",
									"table": "QuickStartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.joshi@yash.com",
									"tokenUserPrincipalName": "anurag.joshi@yash.com"
								},
								"properties": {
									"dataSet": "QuickStartDataSet",
									"table": "QuickStartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.doe@git.com",
									"tokenUserPrincipalName": "anurag.doe@git.com"
								}
							},
							"serialization": null,
							"diagnostics": null
						}
					},
					{
						"name": "Blob",
						"properties": {
							"datasource": {
								"type": "Microsoft.Storage/Blob",
								"properties": {
									"storageAccounts": [{
										"accountName": "[parameters('StorageAccountName')]",
										"accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
									}],
									"container": "[variables('DataAggregatorOutputContainerName')]",
									"pathPattern": "transformOrderStream"
								}
							},
							"serialization": {
								"type": "JSON",
								"properties": {
									"encoding": "UTF8",
									"format": "lineSeparated"
								}
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.StreamAnalytics/StreamingJobs",
			"apiVersion": "2016-03-01",
			"name": "[parameters('DataAggregatorStreamAnalyticsJob2')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"name": "standard"
				},
				"outputErrorPolicy": "stop",
				"eventsOutOfOrderPolicy": "adjust",
				"eventsOutOfOrderMaxDelayInSeconds": 0,
				"eventsLateArrivalMaxDelayInSeconds": 5,
				"dataLocale": "en-US",
				"inputs": [{
					"name": "EventHub",
					"properties": {
						"type": "stream",
						"serialization": {
							"type": "JSON",
							"properties": {
								"encoding": "UTF8"
							}
						},
						"datasource": {
							"type": "Microsoft.ServiceBus/EventHub",
							"properties": {
								"serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
								"sharedAccessPolicyName": "RootManageSharedAccessKey",
								"sharedAccessPolicyKey": "[parameters('sharedAccessPolicyKey')]",
								"eventHubName": "[parameters('DataCleaningOutputStream')]"
							}

						}
					}
				}],
				"transformation": {
					"name": "Transformation",
					"properties": {
						"streamingUnits": "[variables('numberOfStreamingUnits')]",
						"query": "SELECT concat(cast(MAX(DATEPART (dd,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mm,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (yy,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (hh,orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mi,orderDate)) as nvarchar(max))) AS allEvents ,LatLong AS allsku INTO Blob FROM EventHub TIMESTAMP BY orderDate GROUP BY allEvents,LatLong,TumblingWindow(minute,1)"
					}
				},
				"outputs": [{
						"name": "PBI",
						"properties": {
							"dataSource": {
								"type": "PowerBI",
								"outputPowerBISource": {
									"dataSet": "HeartDataSet",
									"table": "HeartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.doe@git.com",
									"tokenUserPrincipalName": "anurag.doe@git.com"
								},
								"properties": {
									"dataSet": "HeartDataSet",
									"table": "HeartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.doe@git.com",
									"tokenUserPrincipalName": "anurag.doe@git.com"
								}
							},
							"serialization": null,
							"diagnostics": null
						}
					},
					{
						"name": "Blob",
						"properties": {
							"datasource": {
								"type": "Microsoft.Storage/Blob",
								"properties": {
									"storageAccounts": [{
										"accountName": "[parameters('StorageAccountName')]",
										"accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
									}],
									"container": "[variables('DataAggregatorOutputContainerName')]",
									"pathPattern": "publishOrderStream"
								}
							},
							"serialization": {
								"type": "JSON",
								"properties": {
									"encoding": "UTF8",
									"format": "lineSeparated"
								}
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.StreamAnalytics/StreamingJobs",
			"apiVersion": "2016-03-01",
			"name": "[parameters('DataAggregatorStreamAnalyticsJob3')]",
			"location": "[resourceGroup().location]",
			"properties": {
				"sku": {
					"name": "standard"
				},
				"outputErrorPolicy": "stop",
				"eventsOutOfOrderPolicy": "adjust",
				"eventsOutOfOrderMaxDelayInSeconds": 0,
				"eventsLateArrivalMaxDelayInSeconds": 5,
				"dataLocale": "en-US",
				"inputs": [{
					"name": "CustomerReferenceDataSet",
					"properties": {
						"type": "Reference",
						"serialization": {
							"type": "JSON",
							"properties": {
								"encoding": "UTF8"
							}
						},
						"datasource": {
							"type": "Microsoft.Storage/Blob",
							"properties": {
								"storageAccounts": [{
									"accountName": "elasticclusterstorage",
									"accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
								}],
								"container": "raw",
								"pathPattern": "customer_updated_refrence.txt"
							}

						}
					}
				}, {
					"name": "EventHub",
					"properties": {
						"type": "stream",
						"serialization": {
							"type": "JSON",
							"properties": {
								"encoding": "UTF8"
							}
						},
						"datasource": {
							"type": "Microsoft.ServiceBus/EventHub",
							"properties": {
								"serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
								"sharedAccessPolicyName": "RootManageSharedAccessKey",
								"sharedAccessPolicyKey": "[parameters('sharedAccessPolicyKey')]",
								"eventHubName": "[parameters('DataCleaningOutputStream')]"
							}

						}
					}
				}],
				"transformation": {
					"name": "Transformation",
					"properties": {
						"streamingUnits": "[variables('numberOfStreamingUnits')]",
						"query": "SELECT concat(cast(MAX(DATEPART (dd,CS1.orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mm,CS1.orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (yy,CS1.orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (hh,CS1.orderDate)) as nvarchar(max)),':',cast(MAX(DATEPART (mi,CS1.orderDate)) as nvarchar(max))) AS allEvents,
						CASE
						WHEN CS2.age >= 18 AND CS2.age < 30 THEN '18-29'
						WHEN CS2.age >= 30 AND CS2.age < 50 THEN '30-49'
						WHEN CS2.age >= 50 AND CS2.age < 65 THEN '50-64'
						WHEN CS2.age >= 65 AND CS2.age < 80 THEN '65-older'
						ELSE CONCAT(' ', 'N A')
						END AS age_grp_category,
						COUNT(CS1.sku) AS count_customers
						INTO Blob
						FROM EventHub CS1 TIMESTAMP BY CS1.orderDate
						JOIN CustomerReferenceDataSet CS2
						ON CS1.customerID = CS2.customer_id
						GROUP BY TumblingWindow(minute, 1),
						CS2.age "
					}
				},
				"outputs": [{
						"name": "PBI",
						"properties": {
							"dataSource": {
								"type": "PowerBI",
								"outputPowerBISource": {
									"dataSet": "HeartDataSet",
									"table": "HeartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.doe@git.com",
									"tokenUserPrincipalName": "anurag.doe@git.com"
								},
								"properties": {
									"dataSet": "HeartDataSet",
									"table": "HeartDataTable",
									"groupId": "",
									"groupName": "My Workspace",
									"refreshToken": "dummytoken",
									"tokenUserDisplayName": "anurag.doe@git.com",
									"tokenUserPrincipalName": "anurag.doe@git.com"
								}
							},
							"serialization": null,
							"diagnostics": null
						}
					},
					{
						"name": "Blob",
						"properties": {
							"datasource": {
								"type": "Microsoft.Storage/Blob",
								"properties": {
									"storageAccounts": [{
										"accountName": "[parameters('StorageAccountName')]",
										"accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
									}],
									"container": "[variables('DataAggregatorOutputContainerName')]",
									"pathPattern": "publishOrderStream"
								}
							},
							"serialization": {
								"type": "JSON",
								"properties": {
									"encoding": "UTF8",
									"format": "lineSeparated"
								}
							}
						}
					}
				]
			}
		}

	]
}
